class Chare {
}
class #int {}
class #boolean {}
class #unit {}

class Ref[T] {
  val t : T;

  def Ref(init : T) { t = init; }
  def deref() : T { return t; }
}


class Fib : Chare  {
    var n : int = 0;
    var total : int = 0;
    var counter : int = 0;
    var c1 : Fib = null;
    var c2 : Fib = null;
    var parent : Fib = null;

    def Fib(n_ : int) { n = n_; total = 0; counter = 0; c1 = null; c2 = null; parent = null; }
    def compute(parent_ : Fib) {
      parent = parent_;
      if (n > 1) {
        c1 = Fib(n-1);
        c2 = Fib(n-2);
        c1.compute(this);
        c2.compute(this);
      } else {
        counter = 1;
        finished(n);
      }
    }
    
    def finished(n : int) {
      total += n;
      counter += 1;
      if (counter == 2) {
        parent.finished(total);
      }
    }
  
  }